<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	
	<security:http auto-config="true" use-expressions="true">
		<security:intercept-url pattern="/login**"	     access="permitAll" />
		<security:intercept-url pattern="/logout**"      access="permitAll" />
		<security:intercept-url pattern="/resources/**"  access="permitAll" />
		<security:intercept-url pattern="/admin/admin**" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/**"            access="hasAnyRole('USER', 'ADMIN')" />

		<!-- Login Form -->
		<security:form-login 
			username-parameter="username"
            password-parameter="password"
			login-page="/login.do"
			authentication-failure-url="/login_failed.do"
            default-target-url="/"
			 />
		
		<!-- Logout -->
		<security:logout logout-success-url="/logout.do" />
		
		<!-- CSRF -->
	    <security:csrf/>
		<security:access-denied-handler ref="accessDeniedHandler"/>
		
		<!-- Session -->
		<security:session-management >
            <security:concurrency-control max-sessions="1" expired-url="/login_duplicated.do" />
        </security:session-management>
        <security:access-denied-handler ref="accessDeniedHandler"/>
		
		
		<!-- Header -->
		<security:headers>
		    <security:cache-control />
            <security:content-type-options />
            <security:hsts />
            <security:frame-options policy="SAMEORIGIN" />
            <security:xss-protection />
		</security:headers>
	</security:http>

    <!-- Bean for Handler -->
    <bean id="accessDeniedHandler" class="org.springframework.security.web.access.DelegatingAccessDeniedHandler">
        <constructor-arg index="0">
            <map>
                <entry key="org.springframework.security.web.csrf.InvalidCsrfTokenException"> 
                    <bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
                        <property name="errorPage" value="/WEB-INF/views/error/invalidCsrfTokenError.jsp" />
                    </bean>
                </entry>
                <entry key="org.springframework.security.web.csrf.MissingCsrfTokenException">
                    <bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
                        <property name="errorPage" value="/WEB-INF/views/error/missingCsrfTokenError.jsp" />
                    </bean>
                </entry>
            </map>
        </constructor-arg>
        <constructor-arg index="1">
            <bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
                <property name="errorPage" value="/WEB-INF/views/error/accessDeniedError.jsp" />
            </bean>
        </constructor-arg>
    </bean>
 

    <!-- 1) 인증 정보를 메모리에서 직접 읽어서 처리함 
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="user" password="user" authorities="ROLE_USER" />
				<security:user name="admin" password="admin" authorities="ROLE_ADMIN" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
    -->
     
    <!-- 2) 인증 정보를 데이터베이스에서 직접 읽어서 처리함 
	<security:authentication-manager>
	    <security:authentication-provider>
	        <security:jdbc-user-service
	                data-source-ref="dataSource"
	                users-by-username-query="SELECT username, password, enabled FROM users WHERE username=?"
	                authorities-by-username-query="SELECT a.username, c.name as rolename  FROM users a JOIN role_members b ON a.id = b.members_id JOIN roles c ON b.roles_id = c.id WHERE a.username=?"
	                />
	          <security:password-encoder ref="encoder" />
	    </security:authentication-provider>
	</security:authentication-manager>
    -->

    <!-- 3) UserDetailsService(DAO)를 이용하여 사용자 정보를 처리함 --> 
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder ref="encoder" />
        </security:authentication-provider>
    </security:authentication-manager>
    <bean id="userDetailsService" class="com.mgchoo.security2.auth.service.UserDetailsServiceImpl" />


    <!-- 패스워드를  BCrypt 해시 알고리즘을 이용하여 해싱하여 비교한다. -->
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg name="strength" value="11" />
    </bean>

 
</beans>