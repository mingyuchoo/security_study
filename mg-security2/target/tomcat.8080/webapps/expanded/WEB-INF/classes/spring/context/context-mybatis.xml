<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- ########################## 스프링과 myBatis 연동을 위한 설정 ########################### -->


    <!-- 일반적으로 DAO에서 myBatis를 사용하는 시나리오
            1. Dao는 SqlSessionFactory에게 SQL을 실행할 객체를 요구한다. 
            2. SqlSessionFactory는 SqlSession 객체를 생성하여 반환한다. 
            3. Dao는 SqlSession  객체에게 SQL실행을 요청한다.
            4. SqlSession 객체는 SQL이 저장된 맵퍼 파일(XML) 에서 SQL을 찾는다. 
            5. SqlSession은  JDBC드라이버를 통해 데이터베이스에 질의를 실행한다.
            6. SqlSession은 데이터베이스로부터 가져온 질의 결과를 객체로 생성하여 반환한다.
            7. Dao는 사용이 끝난 SqlSession을 닫는다.
    -->
    <!-- myBatis 프레임워크의 핵심 컴포넌트
            * SqlSession - 실제 SQL을 실행하는 객체, 이 객체는 SQL을 처리하기 위해 JDBC드라이버를 사용한다.
            * SqlSessionFactory - SqlSession 객체를 생성한다.
            * SqlSessionFactoryBuilder - mysql 설정 파일의 내용을 토대로 SqlSessionFactory를 생성한다.
            * mybatis 설정 파일 - 데이터베이스 연결 정보, 트랜잭션 정보, mybatis제어 정보등의 설정 내용을 포함하고 SqlSessionFactory를 만들 때 사용된다.
            * SQL 맵퍼 파일 - SQL문을 담고 있는 파일, 보통 XML파일로 작성. SqlSession객체가 참조한다.
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:spring/config/mybatis-config.xml" />
        <property name="mapperLocations">
            <list>
                <value>classpath*:com/mgchoo/**/*Mapper.xml</value>
            </list>
        </property>
    </bean>

    <!-- Scan for mappers and let them be autowired
             MapperScannerConfigurer를 이용하면  Mapper Interface를 스프링에서 자동스캔하게 하여
             여러 Mapper를 이용할 수 있는 구성으로 만들 수 있다.
             Mapper를 필요로 하는 DAO에서 주입 받아 (@Repository) 사용하면 된다. 
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mgchoo.security2" />
        <property name="annotationClass" value="org.springframework.stereotype.Repository" />
    </bean>
    <!-- ####################################################################################### -->
    
    
    <!-- 트랜잭션 매니저를 설정한다. (왜 하지?) -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>    
    
</beans>    
